name: azure-deploy

on:
  push:
    branches: [ master ]

env:
  AZURE_RESOURCE_GROUP_NAME: 'rg-funcdeploy-test'
  ENVIRONMENT_NAME: "sklearnmodel"
  ENVIRONMENT_TYPE: "dev"

defaults:
  run:
    shell: bash

jobs:
    deploy_az_infrastructure:
      name: 'Terraform'
      runs-on: ubuntu-latest
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TERRAFORM_SOURCE_PATH: '${{ github.workspace }}/terraform'
        TERRAFORM_BACKEND_STORAGEACCOUNT: "strgsklearnterraform"
        TERRAFORM_BACKEND_RESOURCEGROUP: "rg-funcdeploy-test"
        TERRAFORM_BACKEND_STORAGECONTAINER: "state"
      outputs:
        functionapp_name: ${{ steps.set_functionapp_name.outputs.functionapp_name }}
        functionapp_namee: ${{ steps.set_functionapp_name.outputs.functionapp_namee }}

      steps:
        - name: Checkout
          uses: actions/checkout@v3
          
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1

        - name: Terraform Init
          working-directory: ${{ env.TERRAFORM_SOURCE_PATH }}
          run: terraform init -backend-config=storage_account_name=$TERRAFORM_BACKEND_STORAGEACCOUNT -backend-config=container_name=$TERRAFORM_BACKEND_STORAGECONTAINER -backend-config=key=$ENVIRONMENT_TYPE_$ENVIRONMENT_NAME.tfstate -backend-config=resource_group_name=$TERRAFORM_BACKEND_RESOURCEGROUP -backend-config=subscription_id="$ARM_SUBSCRIPTION_ID" -backend-config=tenant_id="$ARM_TENANT_ID" -backend-config=client_id="$ARM_CLIENT_ID" -backend-config=client_secret="$ARM_CLIENT_SECRET"

        - name: Terraform Plan
          if: github.ref != 'refs/heads/master' && github.event_name == 'push'
          working-directory: ${{ env.TERRAFORM_SOURCE_PATH }}
          run: terraform plan -var="resourcegroup_name=$AZURE_RESOURCE_GROUP_NAME" -var="environment_name=$ENVIRONMENT_NAME" -var="environment_type=$ENVIRONMENT_TYPE"

        - name: Terraform Apply
          if: 1 == 2 && github.ref == 'refs/heads/master' && github.event_name == 'push'
          working-directory: ${{ env.TERRAFORM_SOURCE_PATH }}
          run: terraform apply  -auto-approve -var="resourcegroup_name=$AZURE_RESOURCE_GROUP_NAME" -var="environment_name=$ENVIRONMENT_NAME" -var="environment_type=$ENVIRONMENT_TYPE"

        - name: Set Azure Function App Name
          id: set_functionapp_name
          working-directory: ${{ env.TERRAFORM_SOURCE_PATH }}
          run: |
            echo "0"
            echo ::set-output name=functionapp_namee::"$(terraform output -raw serverless_ml_functionapp_name)"
            echo "1"
            echo $(terraform output serverless_ml_functionapp_name)
            echo "2"
            export functionapp_name=$(terraform output -raw serverless_ml_functionapp_name)
            echo "3"
            echo $functionapp_name
            echo "3.5"
            echo ::set-output name=functionapp_name::$functionapp_name
            echo "4"
            echo $functionapp_name
            echo "5"
            echo "FAPPNAME="$functionapp_name >> $GITHUB_ENV
            echo "6"

        - name: Get Azure Function App Name
          run: |
            echo "0"
            echo "${{ steps.set_functionapp_name.outputs.functionapp_namee }}"
            echo "1"
            echo "${{ steps.set_functionapp_name.outputs.functionapp_name }}"
            echo "2"

        - name: Test env vars
          run: |
            echo "0"
            testvar=$(date)
            echo "1"
            echo "$testvar"
            echo "2"
            
    deploy_az_function:
      needs: [deploy_az_infrastructure]
      runs-on: ubuntu-latest
      env:
        source_function_path: '${{ github.workspace }}/src'
        build_package_name: 'az-func.zip'
        zip_output_path: '${{ github.workspace }}/zip-output'

      steps:
       - name: Get Azure Function App Name
         run: |
            echo "0"
            echo "${{ needs.deploy_az_infrastructure.outputs.functionapp_namee }}"
            echo "1"
            echo "${{ needs.deploy_az_infrastructure.outputs.functionapp_name }}"
            echo "2"
            echo "${{ env.FAPPNAME }}"
            echo "3"

       - name: 'Checking out source code ...'
         uses: actions/checkout@v3
      
       - name: 'Package function into zip file'
         run: |
           mkdir ${{ env.zip_output_path }}
           cd ${{ env.source_function_path }}
           zip -r ${{ env.zip_output_path }}/${{ env.build_package_name }} .

       - name: 'Login to Azure'
         uses: azure/login@v1
         with:
           creds: ${{ secrets.AZURE_CREDENTIALS }}
           enable-AzPSSession: true
       
       - name: 'Fetching Azure Functions Publishing Profile'
         id: fncapp
         uses: azure/powershell@v1
         with:
           inlineScript: |
               $profile = ""
               $profile = Get-AzWebAppPublishingProfile -ResourceGroupName $env:AZURE_RESOURCE_GROUP_NAME -Name $env:AZURE_FUNCTIONAPP_NAME
               $profile = $profile.Replace("`r", "").Replace("`n", "")
               Write-Output "::set-output name=pubprofile::$profile"
               Remove-Variable profile
           azPSVersion: "latest"

       - name: 'Run Azure Functions Action'
         uses: azure/functions-action@v1
         with:
           app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
           package: ${{ env.zip_output_path }}/${{ env.build_package_name }}
           publish-profile: ${{ steps.fncapp.outputs.pubprofile }}
           scm-do-build-during-deployment: true
           enable-oryx-build: true
